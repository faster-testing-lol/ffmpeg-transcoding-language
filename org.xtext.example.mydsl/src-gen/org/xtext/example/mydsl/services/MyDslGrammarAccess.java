/*
 * generated by Xtext 2.20.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStreamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStreamsStreamParserRuleCall_1_0 = (RuleCall)cStreamsAssignment_1.eContents().get(0);
		private final Assignment cTransformsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTransformsTransformParserRuleCall_2_0 = (RuleCall)cTransformsAssignment_2.eContents().get(0);
		
		//Program:
		//	{Program} streams+=Stream*
		//	transforms+=Transform*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Program} streams+=Stream* transforms+=Transform*
		public Group getGroup() { return cGroup; }
		
		//{Program}
		public Action getProgramAction_0() { return cProgramAction_0; }
		
		//streams+=Stream*
		public Assignment getStreamsAssignment_1() { return cStreamsAssignment_1; }
		
		//Stream
		public RuleCall getStreamsStreamParserRuleCall_1_0() { return cStreamsStreamParserRuleCall_1_0; }
		
		//transforms+=Transform*
		public Assignment getTransformsAssignment_2() { return cTransformsAssignment_2; }
		
		//Transform
		public RuleCall getTransformsTransformParserRuleCall_2_0() { return cTransformsTransformParserRuleCall_2_0; }
	}
	public class StreamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Stream");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOutputStreamParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Stream:
		//	In | OutputStream;
		@Override public ParserRule getRule() { return rule; }
		
		//In | OutputStream
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//In
		public RuleCall getInParserRuleCall_0() { return cInParserRuleCall_0; }
		
		//OutputStream
		public RuleCall getOutputStreamParserRuleCall_1() { return cOutputStreamParserRuleCall_1; }
	}
	public class InElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.In");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cApostropheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPathAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPathSTRINGTerminalRuleCall_3_0 = (RuleCall)cPathAssignment_3.eContents().get(0);
		private final Keyword cApostropheKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//In:
		//	'in' name=STRING '\'' path=STRING '\'' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'in' name=STRING '\'' path=STRING '\'' ';'
		public Group getGroup() { return cGroup; }
		
		//'in'
		public Keyword getInKeyword_0() { return cInKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'\''
		public Keyword getApostropheKeyword_2() { return cApostropheKeyword_2; }
		
		//path=STRING
		public Assignment getPathAssignment_3() { return cPathAssignment_3; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_3_0() { return cPathSTRINGTerminalRuleCall_3_0; }
		
		//'\''
		public Keyword getApostropheKeyword_4() { return cApostropheKeyword_4; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class OutputStreamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OutputStream");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOutParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTempParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OutputStream:
		//	Out | Temp;
		@Override public ParserRule getRule() { return rule; }
		
		//Out | Temp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Out
		public RuleCall getOutParserRuleCall_0() { return cOutParserRuleCall_0; }
		
		//Temp
		public RuleCall getTempParserRuleCall_1() { return cTempParserRuleCall_1; }
	}
	public class OutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Out");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cApostropheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPathAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPathSTRINGTerminalRuleCall_3_0 = (RuleCall)cPathAssignment_3.eContents().get(0);
		private final Keyword cApostropheKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Out:
		//	'out' name=STRING '\'' path=STRING '\'' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'out' name=STRING '\'' path=STRING '\'' ';'
		public Group getGroup() { return cGroup; }
		
		//'out'
		public Keyword getOutKeyword_0() { return cOutKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'\''
		public Keyword getApostropheKeyword_2() { return cApostropheKeyword_2; }
		
		//path=STRING
		public Assignment getPathAssignment_3() { return cPathAssignment_3; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_3_0() { return cPathSTRINGTerminalRuleCall_3_0; }
		
		//'\''
		public Keyword getApostropheKeyword_4() { return cApostropheKeyword_4; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class TempElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Temp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTempKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cApostropheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPathAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPathSTRINGTerminalRuleCall_3_0 = (RuleCall)cPathAssignment_3.eContents().get(0);
		private final Keyword cApostropheKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Temp:
		//	'temp' name=STRING '\'' path=STRING '\'' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'temp' name=STRING '\'' path=STRING '\'' ';'
		public Group getGroup() { return cGroup; }
		
		//'temp'
		public Keyword getTempKeyword_0() { return cTempKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'\''
		public Keyword getApostropheKeyword_2() { return cApostropheKeyword_2; }
		
		//path=STRING
		public Assignment getPathAssignment_3() { return cPathAssignment_3; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_3_0() { return cPathSTRINGTerminalRuleCall_3_0; }
		
		//'\''
		public Keyword getApostropheKeyword_4() { return cApostropheKeyword_4; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class TransformElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Transform");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOutputAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOutputSTRINGTerminalRuleCall_0_0 = (RuleCall)cOutputAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInstructionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInstructionInstructionParserRuleCall_3_0 = (RuleCall)cInstructionAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Transform:
		//	output=STRING '=' '{'
		//	instruction+=Instruction*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//output=STRING '=' '{' instruction+=Instruction* '}'
		public Group getGroup() { return cGroup; }
		
		//output=STRING
		public Assignment getOutputAssignment_0() { return cOutputAssignment_0; }
		
		//STRING
		public RuleCall getOutputSTRINGTerminalRuleCall_0_0() { return cOutputSTRINGTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//instruction+=Instruction*
		public Assignment getInstructionAssignment_3() { return cInstructionAssignment_3; }
		
		//Instruction
		public RuleCall getInstructionInstructionParserRuleCall_3_0() { return cInstructionInstructionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Instruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cSepiaParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cBlurParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Instruction:
		//	(Sepia | Blur) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(Sepia | Blur) ';'
		public Group getGroup() { return cGroup; }
		
		//(Sepia | Blur)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//Sepia
		public RuleCall getSepiaParserRuleCall_0_0() { return cSepiaParserRuleCall_0_0; }
		
		//Blur
		public RuleCall getBlurParserRuleCall_0_1() { return cBlurParserRuleCall_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class VideoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Video");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVideoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInputAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInputSTRINGTerminalRuleCall_1_0 = (RuleCall)cInputAssignment_1.eContents().get(0);
		
		//Video:
		//	'video' input=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'video' input=STRING
		public Group getGroup() { return cGroup; }
		
		//'video'
		public Keyword getVideoKeyword_0() { return cVideoKeyword_0; }
		
		//input=STRING
		public Assignment getInputAssignment_1() { return cInputAssignment_1; }
		
		//STRING
		public RuleCall getInputSTRINGTerminalRuleCall_1_0() { return cInputSTRINGTerminalRuleCall_1_0; }
	}
	public class SepiaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Sepia");
		private final Keyword cSepiaKeyword = (Keyword)rule.eContents().get(1);
		
		//Sepia:
		//	'sepia';
		@Override public ParserRule getRule() { return rule; }
		
		//'sepia'
		public Keyword getSepiaKeyword() { return cSepiaKeyword; }
	}
	public class BlurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Blur");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBlurKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRadiusAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRadiusINTTerminalRuleCall_1_0 = (RuleCall)cRadiusAssignment_1.eContents().get(0);
		
		//Blur:
		//	'blur' radius=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'blur' radius=INT
		public Group getGroup() { return cGroup; }
		
		//'blur'
		public Keyword getBlurKeyword_0() { return cBlurKeyword_0; }
		
		//radius=INT
		public Assignment getRadiusAssignment_1() { return cRadiusAssignment_1; }
		
		//INT
		public RuleCall getRadiusINTTerminalRuleCall_1_0() { return cRadiusINTTerminalRuleCall_1_0; }
	}
	
	
	private final ProgramElements pProgram;
	private final StreamElements pStream;
	private final InElements pIn;
	private final OutputStreamElements pOutputStream;
	private final OutElements pOut;
	private final TempElements pTemp;
	private final TransformElements pTransform;
	private final InstructionElements pInstruction;
	private final VideoElements pVideo;
	private final SepiaElements pSepia;
	private final BlurElements pBlur;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pStream = new StreamElements();
		this.pIn = new InElements();
		this.pOutputStream = new OutputStreamElements();
		this.pOut = new OutElements();
		this.pTemp = new TempElements();
		this.pTransform = new TransformElements();
		this.pInstruction = new InstructionElements();
		this.pVideo = new VideoElements();
		this.pSepia = new SepiaElements();
		this.pBlur = new BlurElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	{Program} streams+=Stream*
	//	transforms+=Transform*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Stream:
	//	In | OutputStream;
	public StreamElements getStreamAccess() {
		return pStream;
	}
	
	public ParserRule getStreamRule() {
		return getStreamAccess().getRule();
	}
	
	//In:
	//	'in' name=STRING '\'' path=STRING '\'' ';';
	public InElements getInAccess() {
		return pIn;
	}
	
	public ParserRule getInRule() {
		return getInAccess().getRule();
	}
	
	//OutputStream:
	//	Out | Temp;
	public OutputStreamElements getOutputStreamAccess() {
		return pOutputStream;
	}
	
	public ParserRule getOutputStreamRule() {
		return getOutputStreamAccess().getRule();
	}
	
	//Out:
	//	'out' name=STRING '\'' path=STRING '\'' ';';
	public OutElements getOutAccess() {
		return pOut;
	}
	
	public ParserRule getOutRule() {
		return getOutAccess().getRule();
	}
	
	//Temp:
	//	'temp' name=STRING '\'' path=STRING '\'' ';';
	public TempElements getTempAccess() {
		return pTemp;
	}
	
	public ParserRule getTempRule() {
		return getTempAccess().getRule();
	}
	
	//Transform:
	//	output=STRING '=' '{'
	//	instruction+=Instruction*
	//	'}';
	public TransformElements getTransformAccess() {
		return pTransform;
	}
	
	public ParserRule getTransformRule() {
		return getTransformAccess().getRule();
	}
	
	//Instruction:
	//	(Sepia | Blur) ';';
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//Video:
	//	'video' input=STRING;
	public VideoElements getVideoAccess() {
		return pVideo;
	}
	
	public ParserRule getVideoRule() {
		return getVideoAccess().getRule();
	}
	
	//Sepia:
	//	'sepia';
	public SepiaElements getSepiaAccess() {
		return pSepia;
	}
	
	public ParserRule getSepiaRule() {
		return getSepiaAccess().getRule();
	}
	
	//Blur:
	//	'blur' radius=INT;
	public BlurElements getBlurAccess() {
		return pBlur;
	}
	
	public ParserRule getBlurRule() {
		return getBlurAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
