/*
 * generated by Xtext 2.20.0
 */
package org.xtext.ftl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import ftl.*
import java.util.Random

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class FTLGenerator extends AbstractGenerator {

	override void doGenerate(Resource res, IFileSystemAccess2 fsa, IGeneratorContext ctx) {
		fsa.generateFile(res.URI.trimFileExtension.appendFileExtension("sh").lastSegment,
			res.allContents.filter(Program).toIterable.head.compile.toString)
	}
	
	def dispatch compile(Instruction inst) ''' Pas content '''
	
	def dispatch compile(Program program) '''
	«FOR transform : program.transforms»
		«transform.compile»
	«ENDFOR»
	'''

	def dispatch compile(Transform transform) '''
	ffmpeg \
	«FOR input : transform.input»
		-i «input.path. get(new Random().nextInt(input.path.size()))» \
	«ENDFOR»
	«var i = 0»
	«FOR input : transform.input»
		«IF input instanceof Audio»
			-map «i++»:a \
		«ENDIF»
		«IF input instanceof Video»
			-map «i++»:v \
		«ENDIF»
	«ENDFOR»
	«IF transform.instruction.size() > 0»
		-y -filter_complex "
	«ENDIF»
	«FOR instruction : transform.instruction SEPARATOR ',' AFTER '"'»
		«instruction.compile»
	«ENDFOR»
	 «transform.output»;
	'''
	
	def dispatch compile(Sepia sepia) '''
	colorchannelmixer=.393:.769:.189:0:.349:.686:.168:0:.272:.534:.131,eq=1.0:0:1.3:2.4:1.0:1.0:1.0:1.0
	'''
	
	def dispatch compile (Grayscale grayscale) '''
	hue=s=0
	'''
	
	def dispatch compile(Sharpen sharpen) '''
	convolution=\"0 -1 0 -1 5 -1 0 -1 0:0 -1 0 -1 5 -1 0 -1 0:0 -1 0 -1 5 -1 0 -1 0:0 -1 0 -1 5 -1 0 -1 0\"
	'''
	
	def dispatch compile(Reverse reverse) '''
	reverse
	'''
	
	def dispatch compile(Blur blur) '''
	avgblur=sizeX=«blur.radius»
	'''
	
	def dispatch compile(Scale scale) '''
	scale=w=«scale.factor»*iw:h=«scale.factor»*ih
	'''
	
	def dispatch compile(Start start) '''
	trim=start=«start.time»
	'''
	
	def dispatch compile(End end) '''
	trim=end=«end.time»
	'''
	
	def dispatch compile(Mix mix) '''
	mix
	'''
	
	def dispatch compile(Echo echo) '''
	aecho=0.6:0.3:«echo.delay»:0.5
	'''
	
	def dispatch compile(Negate negate) '''
	negate
	'''
	
	def dispatch compile(Fps fps) '''
	fps=fps=«fps.value»
	'''
	
	def dispatch compile(Concat concat) '''
	concat
	'''
}
