/*
 * generated by Xtext 2.20.0
 */
package org.xtext.ftl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FTLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ftl.FTL.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTransformsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTransformsTransformParserRuleCall_1_0 = (RuleCall)cTransformsAssignment_1.eContents().get(0);
		
		//Program:
		//	{Program} transforms+=Transform*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Program} transforms+=Transform*
		public Group getGroup() { return cGroup; }
		
		//{Program}
		public Action getProgramAction_0() { return cProgramAction_0; }
		
		//transforms+=Transform*
		public Assignment getTransformsAssignment_1() { return cTransformsAssignment_1; }
		
		//Transform
		public RuleCall getTransformsTransformParserRuleCall_1_0() { return cTransformsTransformParserRuleCall_1_0; }
	}
	public class TransformElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ftl.FTL.Transform");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOutputAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOutputSTRINGTerminalRuleCall_0_0 = (RuleCall)cOutputAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInstructionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInstructionInstructionParserRuleCall_3_0 = (RuleCall)cInstructionAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Transform:
		//	output=STRING '=' '{'
		//	instruction+=Instruction*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//output=STRING '=' '{' instruction+=Instruction* '}'
		public Group getGroup() { return cGroup; }
		
		//output=STRING
		public Assignment getOutputAssignment_0() { return cOutputAssignment_0; }
		
		//STRING
		public RuleCall getOutputSTRINGTerminalRuleCall_0_0() { return cOutputSTRINGTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//instruction+=Instruction*
		public Assignment getInstructionAssignment_3() { return cInstructionAssignment_3; }
		
		//Instruction
		public RuleCall getInstructionInstructionParserRuleCall_3_0() { return cInstructionInstructionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ftl.FTL.Instruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cVideoParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cAudioParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cSepiaParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cBlurParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Instruction:
		//	(Video | Audio | Sepia | Blur) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(Video | Audio | Sepia | Blur) ';'
		public Group getGroup() { return cGroup; }
		
		//(Video | Audio | Sepia | Blur)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//Video
		public RuleCall getVideoParserRuleCall_0_0() { return cVideoParserRuleCall_0_0; }
		
		//Audio
		public RuleCall getAudioParserRuleCall_0_1() { return cAudioParserRuleCall_0_1; }
		
		//Sepia
		public RuleCall getSepiaParserRuleCall_0_2() { return cSepiaParserRuleCall_0_2; }
		
		//Blur
		public RuleCall getBlurParserRuleCall_0_3() { return cBlurParserRuleCall_0_3; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class VideoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ftl.FTL.Video");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVideoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInputAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInputSTRINGTerminalRuleCall_1_0 = (RuleCall)cInputAssignment_1.eContents().get(0);
		
		//Video:
		//	'video' input=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'video' input=STRING
		public Group getGroup() { return cGroup; }
		
		//'video'
		public Keyword getVideoKeyword_0() { return cVideoKeyword_0; }
		
		//input=STRING
		public Assignment getInputAssignment_1() { return cInputAssignment_1; }
		
		//STRING
		public RuleCall getInputSTRINGTerminalRuleCall_1_0() { return cInputSTRINGTerminalRuleCall_1_0; }
	}
	public class AudioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ftl.FTL.Audio");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAudioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInputAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInputSTRINGTerminalRuleCall_1_0 = (RuleCall)cInputAssignment_1.eContents().get(0);
		
		//Audio:
		//	'audio' input=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'audio' input=STRING
		public Group getGroup() { return cGroup; }
		
		//'audio'
		public Keyword getAudioKeyword_0() { return cAudioKeyword_0; }
		
		//input=STRING
		public Assignment getInputAssignment_1() { return cInputAssignment_1; }
		
		//STRING
		public RuleCall getInputSTRINGTerminalRuleCall_1_0() { return cInputSTRINGTerminalRuleCall_1_0; }
	}
	public class SepiaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ftl.FTL.Sepia");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSepiaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSepiaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Sepia:
		//	{Sepia}
		//	'sepia';
		@Override public ParserRule getRule() { return rule; }
		
		//{Sepia} 'sepia'
		public Group getGroup() { return cGroup; }
		
		//{Sepia}
		public Action getSepiaAction_0() { return cSepiaAction_0; }
		
		//'sepia'
		public Keyword getSepiaKeyword_1() { return cSepiaKeyword_1; }
	}
	public class BlurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ftl.FTL.Blur");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBlurKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRadiusAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRadiusINTTerminalRuleCall_1_0 = (RuleCall)cRadiusAssignment_1.eContents().get(0);
		
		//Blur:
		//	'blur' radius=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'blur' radius=INT
		public Group getGroup() { return cGroup; }
		
		//'blur'
		public Keyword getBlurKeyword_0() { return cBlurKeyword_0; }
		
		//radius=INT
		public Assignment getRadiusAssignment_1() { return cRadiusAssignment_1; }
		
		//INT
		public RuleCall getRadiusINTTerminalRuleCall_1_0() { return cRadiusINTTerminalRuleCall_1_0; }
	}
	
	
	private final ProgramElements pProgram;
	private final TransformElements pTransform;
	private final InstructionElements pInstruction;
	private final VideoElements pVideo;
	private final AudioElements pAudio;
	private final SepiaElements pSepia;
	private final BlurElements pBlur;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FTLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pTransform = new TransformElements();
		this.pInstruction = new InstructionElements();
		this.pVideo = new VideoElements();
		this.pAudio = new AudioElements();
		this.pSepia = new SepiaElements();
		this.pBlur = new BlurElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.ftl.FTL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	{Program} transforms+=Transform*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Transform:
	//	output=STRING '=' '{'
	//	instruction+=Instruction*
	//	'}';
	public TransformElements getTransformAccess() {
		return pTransform;
	}
	
	public ParserRule getTransformRule() {
		return getTransformAccess().getRule();
	}
	
	//Instruction:
	//	(Video | Audio | Sepia | Blur) ';';
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//Video:
	//	'video' input=STRING;
	public VideoElements getVideoAccess() {
		return pVideo;
	}
	
	public ParserRule getVideoRule() {
		return getVideoAccess().getRule();
	}
	
	//Audio:
	//	'audio' input=STRING;
	public AudioElements getAudioAccess() {
		return pAudio;
	}
	
	public ParserRule getAudioRule() {
		return getAudioAccess().getRule();
	}
	
	//Sepia:
	//	{Sepia}
	//	'sepia';
	public SepiaElements getSepiaAccess() {
		return pSepia;
	}
	
	public ParserRule getSepiaRule() {
		return getSepiaAccess().getRule();
	}
	
	//Blur:
	//	'blur' radius=INT;
	public BlurElements getBlurAccess() {
		return pBlur;
	}
	
	public ParserRule getBlurRule() {
		return getBlurAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
