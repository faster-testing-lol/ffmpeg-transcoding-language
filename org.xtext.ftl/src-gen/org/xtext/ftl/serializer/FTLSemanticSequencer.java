/*
 * generated by Xtext 2.20.0
 */
package org.xtext.ftl.serializer;

import com.google.inject.Inject;
import ftl.Audio;
import ftl.Blur;
import ftl.FtlPackage;
import ftl.Program;
import ftl.Sepia;
import ftl.Transform;
import ftl.Video;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.ftl.services.FTLGrammarAccess;

@SuppressWarnings("all")
public class FTLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FTLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FtlPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FtlPackage.AUDIO:
				sequence_Audio(context, (Audio) semanticObject); 
				return; 
			case FtlPackage.BLUR:
				sequence_Blur(context, (Blur) semanticObject); 
				return; 
			case FtlPackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case FtlPackage.SEPIA:
				sequence_Sepia(context, (Sepia) semanticObject); 
				return; 
			case FtlPackage.TRANSFORM:
				sequence_Transform(context, (Transform) semanticObject); 
				return; 
			case FtlPackage.VIDEO:
				sequence_Video(context, (Video) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Instruction returns Audio
	 *     Audio returns Audio
	 *
	 * Constraint:
	 *     input=STRING
	 */
	protected void sequence_Audio(ISerializationContext context, Audio semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FtlPackage.Literals.AUDIO__INPUT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FtlPackage.Literals.AUDIO__INPUT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAudioAccess().getInputSTRINGTerminalRuleCall_1_0(), semanticObject.getInput());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns Blur
	 *     Blur returns Blur
	 *
	 * Constraint:
	 *     radius=INT
	 */
	protected void sequence_Blur(ISerializationContext context, Blur semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FtlPackage.Literals.BLUR__RADIUS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FtlPackage.Literals.BLUR__RADIUS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBlurAccess().getRadiusINTTerminalRuleCall_1_0(), semanticObject.getRadius());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     transforms+=Transform*
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns Sepia
	 *     Sepia returns Sepia
	 *
	 * Constraint:
	 *     {Sepia}
	 */
	protected void sequence_Sepia(ISerializationContext context, Sepia semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transform returns Transform
	 *
	 * Constraint:
	 *     (output=STRING instruction+=Instruction*)
	 */
	protected void sequence_Transform(ISerializationContext context, Transform semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns Video
	 *     Video returns Video
	 *
	 * Constraint:
	 *     input=STRING
	 */
	protected void sequence_Video(ISerializationContext context, Video semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FtlPackage.Literals.VIDEO__INPUT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FtlPackage.Literals.VIDEO__INPUT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVideoAccess().getInputSTRINGTerminalRuleCall_1_0(), semanticObject.getInput());
		feeder.finish();
	}
	
	
}
