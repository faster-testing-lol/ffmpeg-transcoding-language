/**
 * generated by Xtext 2.20.0
 */
package org.xtext.ftl.generator;

import java.util.Arrays;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource res, final IFileSystemAccess2 fsa, final IGeneratorContext ctx) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field Program is undefined"
      + "\nThe method compile(Instruction) from the type MyDslGenerator refers to the missing type Instruction");
  }
  
  protected CharSequence _compile(final /* Instruction */Object inst) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(" ");
    _builder.append("Pas content ");
    return _builder;
  }
  
  protected CharSequence _compile(final /* Program */Object program) {
    throw new Error("Unresolved compilation problems:"
      + "\nstreams cannot be resolved"
      + "\ncompile cannot be resolved"
      + "\ntransforms cannot be resolved"
      + "\ncompile cannot be resolved");
  }
  
  protected CharSequence _compile(final /* In */Object in) {
    throw new Error("Unresolved compilation problems:"
      + "\nname cannot be resolved"
      + "\npath cannot be resolved");
  }
  
  protected CharSequence _compile(final /* Transform */Object transform) {
    throw new Error("Unresolved compilation problems:"
      + "\noutput cannot be resolved"
      + "\ninstruction cannot be resolved"
      + "\ncompile cannot be resolved");
  }
  
  protected CharSequence _compile(final /* Sepia */Object sepia) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("colorchannelmixer=.393:.769:.189:0:.349:.686:.168:0:.272:.534:.131,eq=1.0:0:1.3:2.4:1.0:1.0:1.0:1.0");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _compile(final /* Video */Object video) {
    throw new Error("Unresolved compilation problems:"
      + "\ninput cannot be resolved");
  }
  
  public CharSequence compile(final Instruction inst) {
    if (inst != null) {
      return _compile(inst); else {
        throw new IllegalArgumentException("Unhandled parameter types: " +
          Arrays.<Object>asList(inst).toString());
      }
    }
  }
  