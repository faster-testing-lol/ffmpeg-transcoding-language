/**
 * generated by Xtext 2.20.0
 */
package org.xtext.ftl.generator;

import com.google.common.collect.Iterators;
import ftl.Audio;
import ftl.Grayscale;
import ftl.Instruction;
import ftl.Program;
import ftl.Reverse;
import ftl.Scale;
import ftl.Sepia;
import ftl.Sharpen;
import ftl.Transform;
import ftl.Video;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class FTLGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource res, final IFileSystemAccess2 fsa, final IGeneratorContext ctx) {
    fsa.generateFile(res.getURI().trimFileExtension().appendFileExtension("sh").lastSegment(), 
      this.compile(IterableExtensions.<Program>head(IteratorExtensions.<Program>toIterable(Iterators.<Program>filter(res.getAllContents(), Program.class)))).toString());
  }
  
  protected CharSequence _compile(final Instruction inst) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(" ");
    _builder.append("Pas content ");
    return _builder;
  }
  
  protected CharSequence _compile(final Program program) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Transform> _transforms = program.getTransforms();
      for(final Transform transform : _transforms) {
        Object _compile = this.compile(transform);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected CharSequence _compile(final Transform transform) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("ffmpeg -y -filter_complex \"");
    _builder.newLine();
    {
      EList<Instruction> _instruction = transform.getInstruction();
      boolean _hasElements = false;
      for(final Instruction instruction : _instruction) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "");
        }
        Object _compile = this.compile(instruction);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\" ");
    String _output = transform.getOutput();
    _builder.append(_output);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _compile(final Sepia sepia) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("colorchannelmixer=.393:.769:.189:0:.349:.686:.168:0:.272:.534:.131,eq=1.0:0:1.3:2.4:1.0:1.0:1.0:1.0");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _compile(final Grayscale grayscale) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("hue=s=0");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _compile(final Video video) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("movie=");
    String _input = video.getInput();
    _builder.append(_input);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _compile(final Audio audio) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("audio=");
    String _input = audio.getInput();
    _builder.append(_input);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _compile(final Sharpen sharpen) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("convolution=\\\"0 -1 0 -1 5 -1 0 -1 0:0 -1 0 -1 5 -1 0 -1 0:0 -1 0 -1 5 -1 0 -1 0:0 -1 0 -1 5 -1 0 -1 0\\\"");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _compile(final Reverse reverse) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("reverse");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _compile(final Scale scale) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("scale=w=");
    float _factor = scale.getFactor();
    _builder.append(_factor);
    _builder.append("*iw:h=");
    float _factor_1 = scale.getFactor();
    _builder.append(_factor_1);
    _builder.append("*ih");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final EObject audio) {
    if (audio instanceof Audio) {
      return _compile((Audio)audio);
    } else if (audio instanceof Grayscale) {
      return _compile((Grayscale)audio);
    } else if (audio instanceof Reverse) {
      return _compile((Reverse)audio);
    } else if (audio instanceof Scale) {
      return _compile((Scale)audio);
    } else if (audio instanceof Sepia) {
      return _compile((Sepia)audio);
    } else if (audio instanceof Sharpen) {
      return _compile((Sharpen)audio);
    } else if (audio instanceof Video) {
      return _compile((Video)audio);
    } else if (audio instanceof Instruction) {
      return _compile((Instruction)audio);
    } else if (audio instanceof Program) {
      return _compile((Program)audio);
    } else if (audio instanceof Transform) {
      return _compile((Transform)audio);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(audio).toString());
    }
  }
}
