/*
 * generated by Xtext 2.20.0
 */
grammar InternalFTL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.ftl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.ftl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.ftl.services.FTLGrammarAccess;

}

@parser::members {

 	private FTLGrammarAccess grammarAccess;

    public InternalFTLParser(TokenStream input, FTLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected FTLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getProgramAccess().getProgramAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getTransformsTransformParserRuleCall_1_0());
				}
				lv_transforms_1_0=ruleTransform
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"transforms",
						lv_transforms_1_0,
						"org.xtext.ftl.FTL.Transform");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleFloat
entryRuleFloat returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFloatRule()); }
	iv_ruleFloat=ruleFloat
	{ $current=$iv_ruleFloat.current.getText(); }
	EOF;

// Rule Float
ruleFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getFloatAccess().getINTTerminalRuleCall_0());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFloatAccess().getFullStopKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getFloatAccess().getINTTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleTransform
entryRuleTransform returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransformRule()); }
	iv_ruleTransform=ruleTransform
	{ $current=$iv_ruleTransform.current; }
	EOF;

// Rule Transform
ruleTransform returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTransformAccess().getTransformAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTransformAccess().getInputInputParserRuleCall_1_0());
				}
				lv_input_1_0=ruleInput
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTransformRule());
					}
					add(
						$current,
						"input",
						lv_input_1_0,
						"org.xtext.ftl.FTL.Input");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getTransformAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTransformAccess().getInputInputParserRuleCall_2_1_0());
					}
					lv_input_3_0=ruleInput
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTransformRule());
						}
						add(
							$current,
							"input",
							lv_input_3_0,
							"org.xtext.ftl.FTL.Input");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4='>'
		{
			newLeafNode(otherlv_4, grammarAccess.getTransformAccess().getGreaterThanSignKeyword_3());
		}
		(
			otherlv_5='{'
			{
				newLeafNode(otherlv_5, grammarAccess.getTransformAccess().getLeftCurlyBracketKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTransformAccess().getInstructionInstructionParserRuleCall_4_1_0());
					}
					lv_instruction_6_0=ruleInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTransformRule());
						}
						add(
							$current,
							"instruction",
							lv_instruction_6_0,
							"org.xtext.ftl.FTL.Instruction");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_7='}'
			{
				newLeafNode(otherlv_7, grammarAccess.getTransformAccess().getRightCurlyBracketKeyword_4_2());
			}
			otherlv_8='>'
			{
				newLeafNode(otherlv_8, grammarAccess.getTransformAccess().getGreaterThanSignKeyword_4_3());
			}
		)?
		(
			(
				lv_output_9_0=RULE_STRING
				{
					newLeafNode(lv_output_9_0, grammarAccess.getTransformAccess().getOutputSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTransformRule());
					}
					setWithLastConsumed(
						$current,
						"output",
						lv_output_9_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleInput
entryRuleInput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputRule()); }
	iv_ruleInput=ruleInput
	{ $current=$iv_ruleInput.current; }
	EOF;

// Rule Input
ruleInput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInputAccess().getAudioParserRuleCall_0());
		}
		this_Audio_0=ruleAudio
		{
			$current = $this_Audio_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInputAccess().getVideoParserRuleCall_1());
		}
		this_Video_1=ruleVideo
		{
			$current = $this_Video_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVideo
entryRuleVideo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVideoRule()); }
	iv_ruleVideo=ruleVideo
	{ $current=$iv_ruleVideo.current; }
	EOF;

// Rule Video
ruleVideo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVideoAccess().getVideoAction_0(),
					$current);
			}
		)
		otherlv_1='video'
		{
			newLeafNode(otherlv_1, grammarAccess.getVideoAccess().getVideoKeyword_1());
		}
		(
			(
				lv_path_2_0=RULE_STRING
				{
					newLeafNode(lv_path_2_0, grammarAccess.getVideoAccess().getPathSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVideoRule());
					}
					addWithLastConsumed(
						$current,
						"path",
						lv_path_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_3='|'
			{
				newLeafNode(otherlv_3, grammarAccess.getVideoAccess().getVerticalLineKeyword_3_0());
			}
			(
				(
					lv_path_4_0=RULE_STRING
					{
						newLeafNode(lv_path_4_0, grammarAccess.getVideoAccess().getPathSTRINGTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVideoRule());
						}
						addWithLastConsumed(
							$current,
							"path",
							lv_path_4_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAudio
entryRuleAudio returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAudioRule()); }
	iv_ruleAudio=ruleAudio
	{ $current=$iv_ruleAudio.current; }
	EOF;

// Rule Audio
ruleAudio returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAudioAccess().getAudioAction_0(),
					$current);
			}
		)
		otherlv_1='audio'
		{
			newLeafNode(otherlv_1, grammarAccess.getAudioAccess().getAudioKeyword_1());
		}
		(
			(
				lv_path_2_0=RULE_STRING
				{
					newLeafNode(lv_path_2_0, grammarAccess.getAudioAccess().getPathSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAudioRule());
					}
					addWithLastConsumed(
						$current,
						"path",
						lv_path_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_3='|'
			{
				newLeafNode(otherlv_3, grammarAccess.getAudioAccess().getVerticalLineKeyword_3_0());
			}
			(
				(
					lv_path_4_0=RULE_STRING
					{
						newLeafNode(lv_path_4_0, grammarAccess.getAudioAccess().getPathSTRINGTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAudioRule());
						}
						addWithLastConsumed(
							$current,
							"path",
							lv_path_4_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	iv_ruleInstruction=ruleInstruction
	{ $current=$iv_ruleInstruction.current; }
	EOF;

// Rule Instruction
ruleInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getSepiaParserRuleCall_0_0());
			}
			this_Sepia_0=ruleSepia
			{
				$current = $this_Sepia_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getBlurParserRuleCall_0_1());
			}
			this_Blur_1=ruleBlur
			{
				$current = $this_Blur_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getGrayscaleParserRuleCall_0_2());
			}
			this_Grayscale_2=ruleGrayscale
			{
				$current = $this_Grayscale_2.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getScaleParserRuleCall_0_3());
			}
			this_Scale_3=ruleScale
			{
				$current = $this_Scale_3.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getSharpenParserRuleCall_0_4());
			}
			this_Sharpen_4=ruleSharpen
			{
				$current = $this_Sharpen_4.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getReverseParserRuleCall_0_5());
			}
			this_Reverse_5=ruleReverse
			{
				$current = $this_Reverse_5.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getMixParserRuleCall_0_6());
			}
			this_Mix_6=ruleMix
			{
				$current = $this_Mix_6.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getEchoParserRuleCall_0_7());
			}
			this_Echo_7=ruleEcho
			{
				$current = $this_Echo_7.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getNegateParserRuleCall_0_8());
			}
			this_Negate_8=ruleNegate
			{
				$current = $this_Negate_8.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getFpsParserRuleCall_0_9());
			}
			this_Fps_9=ruleFps
			{
				$current = $this_Fps_9.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getStartParserRuleCall_0_10());
			}
			this_Start_10=ruleStart
			{
				$current = $this_Start_10.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getEndParserRuleCall_0_11());
			}
			this_End_11=ruleEnd
			{
				$current = $this_End_11.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getConcatParserRuleCall_0_12());
			}
			this_Concat_12=ruleConcat
			{
				$current = $this_Concat_12.current;
				afterParserOrEnumRuleCall();
			}
		)
		otherlv_13=';'
		{
			newLeafNode(otherlv_13, grammarAccess.getInstructionAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleStart
entryRuleStart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStartRule()); }
	iv_ruleStart=ruleStart
	{ $current=$iv_ruleStart.current; }
	EOF;

// Rule Start
ruleStart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStartAccess().getStartAction_0(),
					$current);
			}
		)
		otherlv_1='start'
		{
			newLeafNode(otherlv_1, grammarAccess.getStartAccess().getStartKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStartAccess().getTimeFloatParserRuleCall_2_0());
				}
				lv_time_2_0=ruleFloat
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStartRule());
					}
					set(
						$current,
						"time",
						lv_time_2_0,
						"org.xtext.ftl.FTL.Float");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEnd
entryRuleEnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEndRule()); }
	iv_ruleEnd=ruleEnd
	{ $current=$iv_ruleEnd.current; }
	EOF;

// Rule End
ruleEnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEndAccess().getEndAction_0(),
					$current);
			}
		)
		otherlv_1='end'
		{
			newLeafNode(otherlv_1, grammarAccess.getEndAccess().getEndKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEndAccess().getTimeFloatParserRuleCall_2_0());
				}
				lv_time_2_0=ruleFloat
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEndRule());
					}
					set(
						$current,
						"time",
						lv_time_2_0,
						"org.xtext.ftl.FTL.Float");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFps
entryRuleFps returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFpsRule()); }
	iv_ruleFps=ruleFps
	{ $current=$iv_ruleFps.current; }
	EOF;

// Rule Fps
ruleFps returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFpsAccess().getFpsAction_0(),
					$current);
			}
		)
		otherlv_1='fps'
		{
			newLeafNode(otherlv_1, grammarAccess.getFpsAccess().getFpsKeyword_1());
		}
		(
			(
				lv_value_2_0=RULE_INT
				{
					newLeafNode(lv_value_2_0, grammarAccess.getFpsAccess().getValueINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFpsRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleNegate
entryRuleNegate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNegateRule()); }
	iv_ruleNegate=ruleNegate
	{ $current=$iv_ruleNegate.current; }
	EOF;

// Rule Negate
ruleNegate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNegateAccess().getNegateAction_0(),
					$current);
			}
		)
		otherlv_1='negate'
		{
			newLeafNode(otherlv_1, grammarAccess.getNegateAccess().getNegateKeyword_1());
		}
	)
;

// Entry rule entryRuleEcho
entryRuleEcho returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEchoRule()); }
	iv_ruleEcho=ruleEcho
	{ $current=$iv_ruleEcho.current; }
	EOF;

// Rule Echo
ruleEcho returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEchoAccess().getEchoAction_0(),
					$current);
			}
		)
		otherlv_1='echo'
		{
			newLeafNode(otherlv_1, grammarAccess.getEchoAccess().getEchoKeyword_1());
		}
		(
			(
				lv_delay_2_0=RULE_INT
				{
					newLeafNode(lv_delay_2_0, grammarAccess.getEchoAccess().getDelayINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEchoRule());
					}
					setWithLastConsumed(
						$current,
						"delay",
						lv_delay_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleMix
entryRuleMix returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMixRule()); }
	iv_ruleMix=ruleMix
	{ $current=$iv_ruleMix.current; }
	EOF;

// Rule Mix
ruleMix returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMixAccess().getMixAction_0(),
					$current);
			}
		)
		otherlv_1='mix'
		{
			newLeafNode(otherlv_1, grammarAccess.getMixAccess().getMixKeyword_1());
		}
	)
;

// Entry rule entryRuleSepia
entryRuleSepia returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSepiaRule()); }
	iv_ruleSepia=ruleSepia
	{ $current=$iv_ruleSepia.current; }
	EOF;

// Rule Sepia
ruleSepia returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSepiaAccess().getSepiaAction_0(),
					$current);
			}
		)
		otherlv_1='sepia'
		{
			newLeafNode(otherlv_1, grammarAccess.getSepiaAccess().getSepiaKeyword_1());
		}
	)
;

// Entry rule entryRuleBlur
entryRuleBlur returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlurRule()); }
	iv_ruleBlur=ruleBlur
	{ $current=$iv_ruleBlur.current; }
	EOF;

// Rule Blur
ruleBlur returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBlurAccess().getBlurAction_0(),
					$current);
			}
		)
		otherlv_1='blur'
		{
			newLeafNode(otherlv_1, grammarAccess.getBlurAccess().getBlurKeyword_1());
		}
		(
			(
				lv_radius_2_0=RULE_INT
				{
					newLeafNode(lv_radius_2_0, grammarAccess.getBlurAccess().getRadiusINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBlurRule());
					}
					setWithLastConsumed(
						$current,
						"radius",
						lv_radius_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleGrayscale
entryRuleGrayscale returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGrayscaleRule()); }
	iv_ruleGrayscale=ruleGrayscale
	{ $current=$iv_ruleGrayscale.current; }
	EOF;

// Rule Grayscale
ruleGrayscale returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGrayscaleAccess().getGrayscaleAction_0(),
					$current);
			}
		)
		otherlv_1='grayscale'
		{
			newLeafNode(otherlv_1, grammarAccess.getGrayscaleAccess().getGrayscaleKeyword_1());
		}
	)
;

// Entry rule entryRuleScale
entryRuleScale returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScaleRule()); }
	iv_ruleScale=ruleScale
	{ $current=$iv_ruleScale.current; }
	EOF;

// Rule Scale
ruleScale returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='scale'
		{
			newLeafNode(otherlv_0, grammarAccess.getScaleAccess().getScaleKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getScaleAccess().getFactorFloatParserRuleCall_1_0());
				}
				lv_factor_1_0=ruleFloat
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScaleRule());
					}
					set(
						$current,
						"factor",
						lv_factor_1_0,
						"org.xtext.ftl.FTL.Float");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSharpen
entryRuleSharpen returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSharpenRule()); }
	iv_ruleSharpen=ruleSharpen
	{ $current=$iv_ruleSharpen.current; }
	EOF;

// Rule Sharpen
ruleSharpen returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSharpenAccess().getSharpenAction_0(),
					$current);
			}
		)
		otherlv_1='sharpen'
		{
			newLeafNode(otherlv_1, grammarAccess.getSharpenAccess().getSharpenKeyword_1());
		}
	)
;

// Entry rule entryRuleReverse
entryRuleReverse returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReverseRule()); }
	iv_ruleReverse=ruleReverse
	{ $current=$iv_ruleReverse.current; }
	EOF;

// Rule Reverse
ruleReverse returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getReverseAccess().getReverseAction_0(),
					$current);
			}
		)
		otherlv_1='reverse'
		{
			newLeafNode(otherlv_1, grammarAccess.getReverseAccess().getReverseKeyword_1());
		}
	)
;

// Entry rule entryRuleConcat
entryRuleConcat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConcatRule()); }
	iv_ruleConcat=ruleConcat
	{ $current=$iv_ruleConcat.current; }
	EOF;

// Rule Concat
ruleConcat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getConcatAccess().getConcatAction_0(),
					$current);
			}
		)
		otherlv_1='concat'
		{
			newLeafNode(otherlv_1, grammarAccess.getConcatAccess().getConcatKeyword_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
