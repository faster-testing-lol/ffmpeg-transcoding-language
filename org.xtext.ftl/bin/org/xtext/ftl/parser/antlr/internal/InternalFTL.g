/*
 * generated by Xtext 2.20.0
 */
grammar InternalFTL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.ftl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.ftl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.ftl.services.FTLGrammarAccess;

}

@parser::members {

 	private FTLGrammarAccess grammarAccess;

    public InternalFTLParser(TokenStream input, FTLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected FTLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getProgramAccess().getProgramAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getTransformsTransformParserRuleCall_1_0());
				}
				lv_transforms_1_0=ruleTransform
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"transforms",
						lv_transforms_1_0,
						"org.xtext.ftl.FTL.Transform");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleFloat
entryRuleFloat returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFloatRule()); }
	iv_ruleFloat=ruleFloat
	{ $current=$iv_ruleFloat.current.getText(); }
	EOF;

// Rule Float
ruleFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getFloatAccess().getINTTerminalRuleCall_0());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFloatAccess().getFullStopKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getFloatAccess().getINTTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleTransform
entryRuleTransform returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransformRule()); }
	iv_ruleTransform=ruleTransform
	{ $current=$iv_ruleTransform.current; }
	EOF;

// Rule Transform
ruleTransform returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_output_0_0=RULE_STRING
				{
					newLeafNode(lv_output_0_0, grammarAccess.getTransformAccess().getOutputSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTransformRule());
					}
					setWithLastConsumed(
						$current,
						"output",
						lv_output_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getTransformAccess().getEqualsSignKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTransformAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTransformAccess().getInstructionInstructionParserRuleCall_3_0());
				}
				lv_instruction_3_0=ruleInstruction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTransformRule());
					}
					add(
						$current,
						"instruction",
						lv_instruction_3_0,
						"org.xtext.ftl.FTL.Instruction");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getTransformAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	iv_ruleInstruction=ruleInstruction
	{ $current=$iv_ruleInstruction.current; }
	EOF;

// Rule Instruction
ruleInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getVideoParserRuleCall_0_0());
			}
			this_Video_0=ruleVideo
			{
				$current = $this_Video_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getAudioParserRuleCall_0_1());
			}
			this_Audio_1=ruleAudio
			{
				$current = $this_Audio_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getSepiaParserRuleCall_0_2());
			}
			this_Sepia_2=ruleSepia
			{
				$current = $this_Sepia_2.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getBlurParserRuleCall_0_3());
			}
			this_Blur_3=ruleBlur
			{
				$current = $this_Blur_3.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getGrayscaleParserRuleCall_0_4());
			}
			this_Grayscale_4=ruleGrayscale
			{
				$current = $this_Grayscale_4.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getScaleParserRuleCall_0_5());
			}
			this_Scale_5=ruleScale
			{
				$current = $this_Scale_5.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getSharpenParserRuleCall_0_6());
			}
			this_Sharpen_6=ruleSharpen
			{
				$current = $this_Sharpen_6.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getReverseParserRuleCall_0_7());
			}
			this_Reverse_7=ruleReverse
			{
				$current = $this_Reverse_7.current;
				afterParserOrEnumRuleCall();
			}
		)
		otherlv_8=';'
		{
			newLeafNode(otherlv_8, grammarAccess.getInstructionAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleVideo
entryRuleVideo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVideoRule()); }
	iv_ruleVideo=ruleVideo
	{ $current=$iv_ruleVideo.current; }
	EOF;

// Rule Video
ruleVideo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='video'
		{
			newLeafNode(otherlv_0, grammarAccess.getVideoAccess().getVideoKeyword_0());
		}
		(
			(
				lv_input_1_0=RULE_STRING
				{
					newLeafNode(lv_input_1_0, grammarAccess.getVideoAccess().getInputSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVideoRule());
					}
					setWithLastConsumed(
						$current,
						"input",
						lv_input_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleAudio
entryRuleAudio returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAudioRule()); }
	iv_ruleAudio=ruleAudio
	{ $current=$iv_ruleAudio.current; }
	EOF;

// Rule Audio
ruleAudio returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='audio'
		{
			newLeafNode(otherlv_0, grammarAccess.getAudioAccess().getAudioKeyword_0());
		}
		(
			(
				lv_input_1_0=RULE_STRING
				{
					newLeafNode(lv_input_1_0, grammarAccess.getAudioAccess().getInputSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAudioRule());
					}
					setWithLastConsumed(
						$current,
						"input",
						lv_input_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleSepia
entryRuleSepia returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSepiaRule()); }
	iv_ruleSepia=ruleSepia
	{ $current=$iv_ruleSepia.current; }
	EOF;

// Rule Sepia
ruleSepia returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSepiaAccess().getSepiaAction_0(),
					$current);
			}
		)
		otherlv_1='sepia'
		{
			newLeafNode(otherlv_1, grammarAccess.getSepiaAccess().getSepiaKeyword_1());
		}
	)
;

// Entry rule entryRuleBlur
entryRuleBlur returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlurRule()); }
	iv_ruleBlur=ruleBlur
	{ $current=$iv_ruleBlur.current; }
	EOF;

// Rule Blur
ruleBlur returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='blur'
		{
			newLeafNode(otherlv_0, grammarAccess.getBlurAccess().getBlurKeyword_0());
		}
		(
			(
				lv_radius_1_0=RULE_INT
				{
					newLeafNode(lv_radius_1_0, grammarAccess.getBlurAccess().getRadiusINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBlurRule());
					}
					setWithLastConsumed(
						$current,
						"radius",
						lv_radius_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleGrayscale
entryRuleGrayscale returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGrayscaleRule()); }
	iv_ruleGrayscale=ruleGrayscale
	{ $current=$iv_ruleGrayscale.current; }
	EOF;

// Rule Grayscale
ruleGrayscale returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGrayscaleAccess().getGrayscaleAction_0(),
					$current);
			}
		)
		otherlv_1='grayscale'
		{
			newLeafNode(otherlv_1, grammarAccess.getGrayscaleAccess().getGrayscaleKeyword_1());
		}
	)
;

// Entry rule entryRuleScale
entryRuleScale returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScaleRule()); }
	iv_ruleScale=ruleScale
	{ $current=$iv_ruleScale.current; }
	EOF;

// Rule Scale
ruleScale returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='scale'
		{
			newLeafNode(otherlv_0, grammarAccess.getScaleAccess().getScaleKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getScaleAccess().getFactorFloatParserRuleCall_1_0());
				}
				lv_factor_1_0=ruleFloat
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScaleRule());
					}
					set(
						$current,
						"factor",
						lv_factor_1_0,
						"org.xtext.ftl.FTL.Float");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSharpen
entryRuleSharpen returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSharpenRule()); }
	iv_ruleSharpen=ruleSharpen
	{ $current=$iv_ruleSharpen.current; }
	EOF;

// Rule Sharpen
ruleSharpen returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSharpenAccess().getSharpenAction_0(),
					$current);
			}
		)
		otherlv_1='sharpen'
		{
			newLeafNode(otherlv_1, grammarAccess.getSharpenAccess().getSharpenKeyword_1());
		}
	)
;

// Entry rule entryRuleReverse
entryRuleReverse returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReverseRule()); }
	iv_ruleReverse=ruleReverse
	{ $current=$iv_ruleReverse.current; }
	EOF;

// Rule Reverse
ruleReverse returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getReverseAccess().getReverseAction_0(),
					$current);
			}
		)
		otherlv_1='reverse'
		{
			newLeafNode(otherlv_1, grammarAccess.getReverseAccess().getReverseKeyword_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
