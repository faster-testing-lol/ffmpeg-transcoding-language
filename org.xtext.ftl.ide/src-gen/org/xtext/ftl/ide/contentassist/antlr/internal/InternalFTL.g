/*
 * generated by Xtext 2.20.0
 */
grammar InternalFTL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.ftl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.ftl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.ftl.services.FTLGrammarAccess;

}
@parser::members {
	private FTLGrammarAccess grammarAccess;

	public void setGrammarAccess(FTLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getGroup()); }
		(rule__Program__Group__0)
		{ after(grammarAccess.getProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTransform
entryRuleTransform
:
{ before(grammarAccess.getTransformRule()); }
	 ruleTransform
{ after(grammarAccess.getTransformRule()); } 
	 EOF 
;

// Rule Transform
ruleTransform 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTransformAccess().getGroup()); }
		(rule__Transform__Group__0)
		{ after(grammarAccess.getTransformAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInstruction
entryRuleInstruction
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInstructionAccess().getGroup()); }
		(rule__Instruction__Group__0)
		{ after(grammarAccess.getInstructionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVideo
entryRuleVideo
:
{ before(grammarAccess.getVideoRule()); }
	 ruleVideo
{ after(grammarAccess.getVideoRule()); } 
	 EOF 
;

// Rule Video
ruleVideo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVideoAccess().getGroup()); }
		(rule__Video__Group__0)
		{ after(grammarAccess.getVideoAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAudio
entryRuleAudio
:
{ before(grammarAccess.getAudioRule()); }
	 ruleAudio
{ after(grammarAccess.getAudioRule()); } 
	 EOF 
;

// Rule Audio
ruleAudio 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAudioAccess().getGroup()); }
		(rule__Audio__Group__0)
		{ after(grammarAccess.getAudioAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSepia
entryRuleSepia
:
{ before(grammarAccess.getSepiaRule()); }
	 ruleSepia
{ after(grammarAccess.getSepiaRule()); } 
	 EOF 
;

// Rule Sepia
ruleSepia 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSepiaAccess().getGroup()); }
		(rule__Sepia__Group__0)
		{ after(grammarAccess.getSepiaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlur
entryRuleBlur
:
{ before(grammarAccess.getBlurRule()); }
	 ruleBlur
{ after(grammarAccess.getBlurRule()); } 
	 EOF 
;

// Rule Blur
ruleBlur 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlurAccess().getGroup()); }
		(rule__Blur__Group__0)
		{ after(grammarAccess.getBlurAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstructionAccess().getVideoParserRuleCall_0_0()); }
		ruleVideo
		{ after(grammarAccess.getInstructionAccess().getVideoParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getAudioParserRuleCall_0_1()); }
		ruleAudio
		{ after(grammarAccess.getInstructionAccess().getAudioParserRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getSepiaParserRuleCall_0_2()); }
		ruleSepia
		{ after(grammarAccess.getInstructionAccess().getSepiaParserRuleCall_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getBlurParserRuleCall_0_3()); }
		ruleBlur
		{ after(grammarAccess.getInstructionAccess().getBlurParserRuleCall_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getProgramAction_0()); }
	()
	{ after(grammarAccess.getProgramAccess().getProgramAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getTransformsAssignment_1()); }
	(rule__Program__TransformsAssignment_1)*
	{ after(grammarAccess.getProgramAccess().getTransformsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Transform__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transform__Group__0__Impl
	rule__Transform__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformAccess().getOutputAssignment_0()); }
	(rule__Transform__OutputAssignment_0)
	{ after(grammarAccess.getTransformAccess().getOutputAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transform__Group__1__Impl
	rule__Transform__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getTransformAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transform__Group__2__Impl
	rule__Transform__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getTransformAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transform__Group__3__Impl
	rule__Transform__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformAccess().getInstructionAssignment_3()); }
	(rule__Transform__InstructionAssignment_3)*
	{ after(grammarAccess.getTransformAccess().getInstructionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transform__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getTransformAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Instruction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group__0__Impl
	rule__Instruction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getAlternatives_0()); }
	(rule__Instruction__Alternatives_0)
	{ after(grammarAccess.getInstructionAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getInstructionAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Video__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Video__Group__0__Impl
	rule__Video__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Video__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVideoAccess().getVideoKeyword_0()); }
	'video'
	{ after(grammarAccess.getVideoAccess().getVideoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Video__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Video__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Video__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVideoAccess().getInputAssignment_1()); }
	(rule__Video__InputAssignment_1)
	{ after(grammarAccess.getVideoAccess().getInputAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Audio__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Audio__Group__0__Impl
	rule__Audio__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Audio__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAudioAccess().getAudioKeyword_0()); }
	'audio'
	{ after(grammarAccess.getAudioAccess().getAudioKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Audio__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Audio__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Audio__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAudioAccess().getInputAssignment_1()); }
	(rule__Audio__InputAssignment_1)
	{ after(grammarAccess.getAudioAccess().getInputAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sepia__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sepia__Group__0__Impl
	rule__Sepia__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sepia__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSepiaAccess().getSepiaAction_0()); }
	()
	{ after(grammarAccess.getSepiaAccess().getSepiaAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sepia__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sepia__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sepia__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSepiaAccess().getSepiaKeyword_1()); }
	'sepia'
	{ after(grammarAccess.getSepiaAccess().getSepiaKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Blur__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Blur__Group__0__Impl
	rule__Blur__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Blur__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlurAccess().getBlurKeyword_0()); }
	'blur'
	{ after(grammarAccess.getBlurAccess().getBlurKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Blur__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Blur__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Blur__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlurAccess().getRadiusAssignment_1()); }
	(rule__Blur__RadiusAssignment_1)
	{ after(grammarAccess.getBlurAccess().getRadiusAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__TransformsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getTransformsTransformParserRuleCall_1_0()); }
		ruleTransform
		{ after(grammarAccess.getProgramAccess().getTransformsTransformParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__OutputAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransformAccess().getOutputSTRINGTerminalRuleCall_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getTransformAccess().getOutputSTRINGTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__InstructionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransformAccess().getInstructionInstructionParserRuleCall_3_0()); }
		ruleInstruction
		{ after(grammarAccess.getTransformAccess().getInstructionInstructionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Video__InputAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVideoAccess().getInputSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getVideoAccess().getInputSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Audio__InputAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAudioAccess().getInputSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getAudioAccess().getInputSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Blur__RadiusAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlurAccess().getRadiusINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getBlurAccess().getRadiusINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
