/*
 * generated by Xtext 2.20.0
 */
grammar InternalFTL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.ftl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.ftl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.ftl.services.FTLGrammarAccess;

}
@parser::members {
	private FTLGrammarAccess grammarAccess;

	public void setGrammarAccess(FTLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getGroup()); }
		(rule__Program__Group__0)
		{ after(grammarAccess.getProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFloat
entryRuleFloat
:
{ before(grammarAccess.getFloatRule()); }
	 ruleFloat
{ after(grammarAccess.getFloatRule()); } 
	 EOF 
;

// Rule Float
ruleFloat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFloatAccess().getGroup()); }
		(rule__Float__Group__0)
		{ after(grammarAccess.getFloatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTransform
entryRuleTransform
:
{ before(grammarAccess.getTransformRule()); }
	 ruleTransform
{ after(grammarAccess.getTransformRule()); } 
	 EOF 
;

// Rule Transform
ruleTransform 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTransformAccess().getGroup()); }
		(rule__Transform__Group__0)
		{ after(grammarAccess.getTransformAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInput
entryRuleInput
:
{ before(grammarAccess.getInputRule()); }
	 ruleInput
{ after(grammarAccess.getInputRule()); } 
	 EOF 
;

// Rule Input
ruleInput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInputAccess().getAlternatives()); }
		(rule__Input__Alternatives)
		{ after(grammarAccess.getInputAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVideo
entryRuleVideo
:
{ before(grammarAccess.getVideoRule()); }
	 ruleVideo
{ after(grammarAccess.getVideoRule()); } 
	 EOF 
;

// Rule Video
ruleVideo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVideoAccess().getGroup()); }
		(rule__Video__Group__0)
		{ after(grammarAccess.getVideoAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAudio
entryRuleAudio
:
{ before(grammarAccess.getAudioRule()); }
	 ruleAudio
{ after(grammarAccess.getAudioRule()); } 
	 EOF 
;

// Rule Audio
ruleAudio 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAudioAccess().getGroup()); }
		(rule__Audio__Group__0)
		{ after(grammarAccess.getAudioAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInstruction
entryRuleInstruction
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInstructionAccess().getGroup()); }
		(rule__Instruction__Group__0)
		{ after(grammarAccess.getInstructionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStart
entryRuleStart
:
{ before(grammarAccess.getStartRule()); }
	 ruleStart
{ after(grammarAccess.getStartRule()); } 
	 EOF 
;

// Rule Start
ruleStart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStartAccess().getGroup()); }
		(rule__Start__Group__0)
		{ after(grammarAccess.getStartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnd
entryRuleEnd
:
{ before(grammarAccess.getEndRule()); }
	 ruleEnd
{ after(grammarAccess.getEndRule()); } 
	 EOF 
;

// Rule End
ruleEnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEndAccess().getGroup()); }
		(rule__End__Group__0)
		{ after(grammarAccess.getEndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFps
entryRuleFps
:
{ before(grammarAccess.getFpsRule()); }
	 ruleFps
{ after(grammarAccess.getFpsRule()); } 
	 EOF 
;

// Rule Fps
ruleFps 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFpsAccess().getGroup()); }
		(rule__Fps__Group__0)
		{ after(grammarAccess.getFpsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNegate
entryRuleNegate
:
{ before(grammarAccess.getNegateRule()); }
	 ruleNegate
{ after(grammarAccess.getNegateRule()); } 
	 EOF 
;

// Rule Negate
ruleNegate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNegateAccess().getGroup()); }
		(rule__Negate__Group__0)
		{ after(grammarAccess.getNegateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEcho
entryRuleEcho
:
{ before(grammarAccess.getEchoRule()); }
	 ruleEcho
{ after(grammarAccess.getEchoRule()); } 
	 EOF 
;

// Rule Echo
ruleEcho 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEchoAccess().getGroup()); }
		(rule__Echo__Group__0)
		{ after(grammarAccess.getEchoAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMix
entryRuleMix
:
{ before(grammarAccess.getMixRule()); }
	 ruleMix
{ after(grammarAccess.getMixRule()); } 
	 EOF 
;

// Rule Mix
ruleMix 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMixAccess().getGroup()); }
		(rule__Mix__Group__0)
		{ after(grammarAccess.getMixAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSepia
entryRuleSepia
:
{ before(grammarAccess.getSepiaRule()); }
	 ruleSepia
{ after(grammarAccess.getSepiaRule()); } 
	 EOF 
;

// Rule Sepia
ruleSepia 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSepiaAccess().getGroup()); }
		(rule__Sepia__Group__0)
		{ after(grammarAccess.getSepiaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlur
entryRuleBlur
:
{ before(grammarAccess.getBlurRule()); }
	 ruleBlur
{ after(grammarAccess.getBlurRule()); } 
	 EOF 
;

// Rule Blur
ruleBlur 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlurAccess().getGroup()); }
		(rule__Blur__Group__0)
		{ after(grammarAccess.getBlurAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGrayscale
entryRuleGrayscale
:
{ before(grammarAccess.getGrayscaleRule()); }
	 ruleGrayscale
{ after(grammarAccess.getGrayscaleRule()); } 
	 EOF 
;

// Rule Grayscale
ruleGrayscale 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGrayscaleAccess().getGroup()); }
		(rule__Grayscale__Group__0)
		{ after(grammarAccess.getGrayscaleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleScale
entryRuleScale
:
{ before(grammarAccess.getScaleRule()); }
	 ruleScale
{ after(grammarAccess.getScaleRule()); } 
	 EOF 
;

// Rule Scale
ruleScale 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getScaleAccess().getGroup()); }
		(rule__Scale__Group__0)
		{ after(grammarAccess.getScaleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSharpen
entryRuleSharpen
:
{ before(grammarAccess.getSharpenRule()); }
	 ruleSharpen
{ after(grammarAccess.getSharpenRule()); } 
	 EOF 
;

// Rule Sharpen
ruleSharpen 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSharpenAccess().getGroup()); }
		(rule__Sharpen__Group__0)
		{ after(grammarAccess.getSharpenAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReverse
entryRuleReverse
:
{ before(grammarAccess.getReverseRule()); }
	 ruleReverse
{ after(grammarAccess.getReverseRule()); } 
	 EOF 
;

// Rule Reverse
ruleReverse 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReverseAccess().getGroup()); }
		(rule__Reverse__Group__0)
		{ after(grammarAccess.getReverseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConcat
entryRuleConcat
:
{ before(grammarAccess.getConcatRule()); }
	 ruleConcat
{ after(grammarAccess.getConcatRule()); } 
	 EOF 
;

// Rule Concat
ruleConcat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConcatAccess().getGroup()); }
		(rule__Concat__Group__0)
		{ after(grammarAccess.getConcatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputAccess().getAudioParserRuleCall_0()); }
		ruleAudio
		{ after(grammarAccess.getInputAccess().getAudioParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getInputAccess().getVideoParserRuleCall_1()); }
		ruleVideo
		{ after(grammarAccess.getInputAccess().getVideoParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstructionAccess().getSepiaParserRuleCall_0_0()); }
		ruleSepia
		{ after(grammarAccess.getInstructionAccess().getSepiaParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getBlurParserRuleCall_0_1()); }
		ruleBlur
		{ after(grammarAccess.getInstructionAccess().getBlurParserRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getGrayscaleParserRuleCall_0_2()); }
		ruleGrayscale
		{ after(grammarAccess.getInstructionAccess().getGrayscaleParserRuleCall_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getScaleParserRuleCall_0_3()); }
		ruleScale
		{ after(grammarAccess.getInstructionAccess().getScaleParserRuleCall_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getSharpenParserRuleCall_0_4()); }
		ruleSharpen
		{ after(grammarAccess.getInstructionAccess().getSharpenParserRuleCall_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getReverseParserRuleCall_0_5()); }
		ruleReverse
		{ after(grammarAccess.getInstructionAccess().getReverseParserRuleCall_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getMixParserRuleCall_0_6()); }
		ruleMix
		{ after(grammarAccess.getInstructionAccess().getMixParserRuleCall_0_6()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getEchoParserRuleCall_0_7()); }
		ruleEcho
		{ after(grammarAccess.getInstructionAccess().getEchoParserRuleCall_0_7()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getNegateParserRuleCall_0_8()); }
		ruleNegate
		{ after(grammarAccess.getInstructionAccess().getNegateParserRuleCall_0_8()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getFpsParserRuleCall_0_9()); }
		ruleFps
		{ after(grammarAccess.getInstructionAccess().getFpsParserRuleCall_0_9()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getStartParserRuleCall_0_10()); }
		ruleStart
		{ after(grammarAccess.getInstructionAccess().getStartParserRuleCall_0_10()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getEndParserRuleCall_0_11()); }
		ruleEnd
		{ after(grammarAccess.getInstructionAccess().getEndParserRuleCall_0_11()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getConcatParserRuleCall_0_12()); }
		ruleConcat
		{ after(grammarAccess.getInstructionAccess().getConcatParserRuleCall_0_12()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getProgramAction_0()); }
	()
	{ after(grammarAccess.getProgramAccess().getProgramAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getTransformsAssignment_1()); }
	(rule__Program__TransformsAssignment_1)*
	{ after(grammarAccess.getProgramAccess().getTransformsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Float__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Float__Group__0__Impl
	rule__Float__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
	{ after(grammarAccess.getFloatAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Float__Group__1__Impl
	rule__Float__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getFloatAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Float__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
	{ after(grammarAccess.getFloatAccess().getINTTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Transform__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transform__Group__0__Impl
	rule__Transform__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformAccess().getTransformAction_0()); }
	()
	{ after(grammarAccess.getTransformAccess().getTransformAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transform__Group__1__Impl
	rule__Transform__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformAccess().getInputAssignment_1()); }
	(rule__Transform__InputAssignment_1)
	{ after(grammarAccess.getTransformAccess().getInputAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transform__Group__2__Impl
	rule__Transform__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformAccess().getGroup_2()); }
	(rule__Transform__Group_2__0)*
	{ after(grammarAccess.getTransformAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transform__Group__3__Impl
	rule__Transform__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformAccess().getGreaterThanSignKeyword_3()); }
	'>'
	{ after(grammarAccess.getTransformAccess().getGreaterThanSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transform__Group__4__Impl
	rule__Transform__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformAccess().getGroup_4()); }
	(rule__Transform__Group_4__0)?
	{ after(grammarAccess.getTransformAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transform__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformAccess().getOutputAssignment_5()); }
	(rule__Transform__OutputAssignment_5)
	{ after(grammarAccess.getTransformAccess().getOutputAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Transform__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transform__Group_2__0__Impl
	rule__Transform__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getTransformAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transform__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformAccess().getInputAssignment_2_1()); }
	(rule__Transform__InputAssignment_2_1)
	{ after(grammarAccess.getTransformAccess().getInputAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Transform__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transform__Group_4__0__Impl
	rule__Transform__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformAccess().getLeftCurlyBracketKeyword_4_0()); }
	'{'
	{ after(grammarAccess.getTransformAccess().getLeftCurlyBracketKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transform__Group_4__1__Impl
	rule__Transform__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformAccess().getInstructionAssignment_4_1()); }
	(rule__Transform__InstructionAssignment_4_1)*
	{ after(grammarAccess.getTransformAccess().getInstructionAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transform__Group_4__2__Impl
	rule__Transform__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformAccess().getRightCurlyBracketKeyword_4_2()); }
	'}'
	{ after(grammarAccess.getTransformAccess().getRightCurlyBracketKeyword_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group_4__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transform__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__Group_4__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransformAccess().getGreaterThanSignKeyword_4_3()); }
	'>'
	{ after(grammarAccess.getTransformAccess().getGreaterThanSignKeyword_4_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Video__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Video__Group__0__Impl
	rule__Video__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Video__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVideoAccess().getVideoAction_0()); }
	()
	{ after(grammarAccess.getVideoAccess().getVideoAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Video__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Video__Group__1__Impl
	rule__Video__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Video__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVideoAccess().getVideoKeyword_1()); }
	'video'
	{ after(grammarAccess.getVideoAccess().getVideoKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Video__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Video__Group__2__Impl
	rule__Video__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Video__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVideoAccess().getPathAssignment_2()); }
	(rule__Video__PathAssignment_2)
	{ after(grammarAccess.getVideoAccess().getPathAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Video__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Video__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Video__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVideoAccess().getGroup_3()); }
	(rule__Video__Group_3__0)*
	{ after(grammarAccess.getVideoAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Video__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Video__Group_3__0__Impl
	rule__Video__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Video__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVideoAccess().getVerticalLineKeyword_3_0()); }
	'|'
	{ after(grammarAccess.getVideoAccess().getVerticalLineKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Video__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Video__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Video__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVideoAccess().getPathAssignment_3_1()); }
	(rule__Video__PathAssignment_3_1)
	{ after(grammarAccess.getVideoAccess().getPathAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Audio__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Audio__Group__0__Impl
	rule__Audio__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Audio__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAudioAccess().getAudioAction_0()); }
	()
	{ after(grammarAccess.getAudioAccess().getAudioAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Audio__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Audio__Group__1__Impl
	rule__Audio__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Audio__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAudioAccess().getAudioKeyword_1()); }
	'audio'
	{ after(grammarAccess.getAudioAccess().getAudioKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Audio__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Audio__Group__2__Impl
	rule__Audio__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Audio__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAudioAccess().getPathAssignment_2()); }
	(rule__Audio__PathAssignment_2)
	{ after(grammarAccess.getAudioAccess().getPathAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Audio__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Audio__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Audio__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAudioAccess().getGroup_3()); }
	(rule__Audio__Group_3__0)*
	{ after(grammarAccess.getAudioAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Audio__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Audio__Group_3__0__Impl
	rule__Audio__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Audio__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAudioAccess().getVerticalLineKeyword_3_0()); }
	'|'
	{ after(grammarAccess.getAudioAccess().getVerticalLineKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Audio__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Audio__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Audio__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAudioAccess().getPathAssignment_3_1()); }
	(rule__Audio__PathAssignment_3_1)
	{ after(grammarAccess.getAudioAccess().getPathAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Instruction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group__0__Impl
	rule__Instruction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getAlternatives_0()); }
	(rule__Instruction__Alternatives_0)
	{ after(grammarAccess.getInstructionAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getInstructionAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Start__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Start__Group__0__Impl
	rule__Start__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Start__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStartAccess().getStartAction_0()); }
	()
	{ after(grammarAccess.getStartAccess().getStartAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Start__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Start__Group__1__Impl
	rule__Start__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Start__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStartAccess().getStartKeyword_1()); }
	'start'
	{ after(grammarAccess.getStartAccess().getStartKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Start__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Start__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Start__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStartAccess().getTimeAssignment_2()); }
	(rule__Start__TimeAssignment_2)
	{ after(grammarAccess.getStartAccess().getTimeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__End__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__End__Group__0__Impl
	rule__End__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__End__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEndAccess().getEndAction_0()); }
	()
	{ after(grammarAccess.getEndAccess().getEndAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__End__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__End__Group__1__Impl
	rule__End__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__End__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEndAccess().getEndKeyword_1()); }
	'end'
	{ after(grammarAccess.getEndAccess().getEndKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__End__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__End__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__End__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEndAccess().getTimeAssignment_2()); }
	(rule__End__TimeAssignment_2)
	{ after(grammarAccess.getEndAccess().getTimeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Fps__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fps__Group__0__Impl
	rule__Fps__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fps__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFpsAccess().getFpsAction_0()); }
	()
	{ after(grammarAccess.getFpsAccess().getFpsAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fps__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fps__Group__1__Impl
	rule__Fps__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fps__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFpsAccess().getFpsKeyword_1()); }
	'fps'
	{ after(grammarAccess.getFpsAccess().getFpsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fps__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fps__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fps__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFpsAccess().getValueAssignment_2()); }
	(rule__Fps__ValueAssignment_2)
	{ after(grammarAccess.getFpsAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Negate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Negate__Group__0__Impl
	rule__Negate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Negate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegateAccess().getNegateAction_0()); }
	()
	{ after(grammarAccess.getNegateAccess().getNegateAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Negate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Negate__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Negate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegateAccess().getNegateKeyword_1()); }
	'negate'
	{ after(grammarAccess.getNegateAccess().getNegateKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Echo__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Echo__Group__0__Impl
	rule__Echo__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Echo__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEchoAccess().getEchoAction_0()); }
	()
	{ after(grammarAccess.getEchoAccess().getEchoAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Echo__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Echo__Group__1__Impl
	rule__Echo__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Echo__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEchoAccess().getEchoKeyword_1()); }
	'echo'
	{ after(grammarAccess.getEchoAccess().getEchoKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Echo__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Echo__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Echo__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEchoAccess().getDelayAssignment_2()); }
	(rule__Echo__DelayAssignment_2)
	{ after(grammarAccess.getEchoAccess().getDelayAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Mix__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mix__Group__0__Impl
	rule__Mix__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mix__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMixAccess().getMixAction_0()); }
	()
	{ after(grammarAccess.getMixAccess().getMixAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mix__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mix__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mix__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMixAccess().getMixKeyword_1()); }
	'mix'
	{ after(grammarAccess.getMixAccess().getMixKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sepia__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sepia__Group__0__Impl
	rule__Sepia__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sepia__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSepiaAccess().getSepiaAction_0()); }
	()
	{ after(grammarAccess.getSepiaAccess().getSepiaAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sepia__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sepia__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sepia__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSepiaAccess().getSepiaKeyword_1()); }
	'sepia'
	{ after(grammarAccess.getSepiaAccess().getSepiaKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Blur__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Blur__Group__0__Impl
	rule__Blur__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Blur__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlurAccess().getBlurAction_0()); }
	()
	{ after(grammarAccess.getBlurAccess().getBlurAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Blur__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Blur__Group__1__Impl
	rule__Blur__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Blur__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlurAccess().getBlurKeyword_1()); }
	'blur'
	{ after(grammarAccess.getBlurAccess().getBlurKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Blur__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Blur__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Blur__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlurAccess().getRadiusAssignment_2()); }
	(rule__Blur__RadiusAssignment_2)
	{ after(grammarAccess.getBlurAccess().getRadiusAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Grayscale__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Grayscale__Group__0__Impl
	rule__Grayscale__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Grayscale__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGrayscaleAccess().getGrayscaleAction_0()); }
	()
	{ after(grammarAccess.getGrayscaleAccess().getGrayscaleAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Grayscale__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Grayscale__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Grayscale__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGrayscaleAccess().getGrayscaleKeyword_1()); }
	'grayscale'
	{ after(grammarAccess.getGrayscaleAccess().getGrayscaleKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Scale__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scale__Group__0__Impl
	rule__Scale__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Scale__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScaleAccess().getScaleKeyword_0()); }
	'scale'
	{ after(grammarAccess.getScaleAccess().getScaleKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scale__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scale__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Scale__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScaleAccess().getFactorAssignment_1()); }
	(rule__Scale__FactorAssignment_1)
	{ after(grammarAccess.getScaleAccess().getFactorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sharpen__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sharpen__Group__0__Impl
	rule__Sharpen__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sharpen__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSharpenAccess().getSharpenAction_0()); }
	()
	{ after(grammarAccess.getSharpenAccess().getSharpenAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sharpen__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sharpen__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sharpen__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSharpenAccess().getSharpenKeyword_1()); }
	'sharpen'
	{ after(grammarAccess.getSharpenAccess().getSharpenKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Reverse__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reverse__Group__0__Impl
	rule__Reverse__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Reverse__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReverseAccess().getReverseAction_0()); }
	()
	{ after(grammarAccess.getReverseAccess().getReverseAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reverse__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reverse__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Reverse__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReverseAccess().getReverseKeyword_1()); }
	'reverse'
	{ after(grammarAccess.getReverseAccess().getReverseKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Concat__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Concat__Group__0__Impl
	rule__Concat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Concat__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConcatAccess().getConcatAction_0()); }
	()
	{ after(grammarAccess.getConcatAccess().getConcatAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concat__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Concat__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Concat__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConcatAccess().getConcatKeyword_1()); }
	'concat'
	{ after(grammarAccess.getConcatAccess().getConcatKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__TransformsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getTransformsTransformParserRuleCall_1_0()); }
		ruleTransform
		{ after(grammarAccess.getProgramAccess().getTransformsTransformParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__InputAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransformAccess().getInputInputParserRuleCall_1_0()); }
		ruleInput
		{ after(grammarAccess.getTransformAccess().getInputInputParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__InputAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransformAccess().getInputInputParserRuleCall_2_1_0()); }
		ruleInput
		{ after(grammarAccess.getTransformAccess().getInputInputParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__InstructionAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransformAccess().getInstructionInstructionParserRuleCall_4_1_0()); }
		ruleInstruction
		{ after(grammarAccess.getTransformAccess().getInstructionInstructionParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transform__OutputAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransformAccess().getOutputSTRINGTerminalRuleCall_5_0()); }
		RULE_STRING
		{ after(grammarAccess.getTransformAccess().getOutputSTRINGTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Video__PathAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVideoAccess().getPathSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getVideoAccess().getPathSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Video__PathAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVideoAccess().getPathSTRINGTerminalRuleCall_3_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getVideoAccess().getPathSTRINGTerminalRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Audio__PathAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAudioAccess().getPathSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getAudioAccess().getPathSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Audio__PathAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAudioAccess().getPathSTRINGTerminalRuleCall_3_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getAudioAccess().getPathSTRINGTerminalRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Start__TimeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStartAccess().getTimeFloatParserRuleCall_2_0()); }
		ruleFloat
		{ after(grammarAccess.getStartAccess().getTimeFloatParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__End__TimeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEndAccess().getTimeFloatParserRuleCall_2_0()); }
		ruleFloat
		{ after(grammarAccess.getEndAccess().getTimeFloatParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fps__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFpsAccess().getValueINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getFpsAccess().getValueINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Echo__DelayAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEchoAccess().getDelayINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getEchoAccess().getDelayINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Blur__RadiusAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlurAccess().getRadiusINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getBlurAccess().getRadiusINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scale__FactorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScaleAccess().getFactorFloatParserRuleCall_1_0()); }
		ruleFloat
		{ after(grammarAccess.getScaleAccess().getFactorFloatParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
